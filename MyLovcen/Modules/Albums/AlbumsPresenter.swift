//
//  AlbumsPresenter.swift
//  MyLovcen
//
//  Created by Andrija Scepanovic on 9/29/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class AlbumsPresenter {

    // MARK: - Private properties -

    private unowned let view: AlbumsViewInterface
    private let interactor: AlbumsInteractorInterface
    private let wireframe: AlbumsWireframeInterface

    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(view: AlbumsViewInterface, interactor: AlbumsInteractorInterface, wireframe: AlbumsWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension AlbumsPresenter: AlbumsPresenterInterface {

    func configure(with output: Albums.ViewOutput) -> Albums.ViewInput {

        let didSelectAlbum = PublishRelay<Int>()
        handle(didSelectAlbum: didSelectAlbum.asDriverOnErrorComplete())

        let albums = handleAlbums(with: output.pullToRefresh)

        return Albums.ViewInput(items: cellItems(from: albums, didSelect: didSelectAlbum))
    }

}

// MARK: - Handlers -

extension AlbumsPresenter {

    func handleAlbums(with reload: Signal<Void>) -> Driver<[Album]> {
        reload
            .startWith(())
            .flatMap { [unowned interactor, unowned view] in
                interactor
                    .fetchAlbums()
                    .handleLoadingAndError(with: view)
                    .asDriverOnErrorComplete()
            }
    }

    func handle(didSelectAlbum: Driver<Int>) {
        didSelectAlbum
            .drive(onNext: { [unowned wireframe] in wireframe.showPhotos(for: $0)})
            .disposed(by: disposeBag)
    }
}

// MARK: - Helpers -

extension AlbumsPresenter {

    func cellItems(from albums: Driver<[Album]>, didSelect: PublishRelay<Int>) -> Driver<[TableCellItem]> {
        let albumsToItems: ([Album]) -> [TableCellItem] = {
            $0.map { TitleCellItem(albumId: $0.albumId, title: $0.title, didSelect: didSelect) }
        }
        return albums.map(albumsToItems)
    }
}
